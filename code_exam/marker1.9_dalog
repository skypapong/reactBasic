<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Uploaded Image</title>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <style>
        .marker-set-A {
            background-color: #ff0000;
        }

        .marker-set-B {
            background-color: #00ff00;
        }

        .marker-set-C {
            background-color: #0000ff;
        }

        .marker-set-D {
            background-color: #ffff00;
        }

        .highlighted {
            border: 2px solid yellow;
        }

        .delete-set {
            margin-left: 10px;
            color: red;
            cursor: pointer;
        }
    </style>
</head>
<body>
    <h2>ภาพบู๊ทภายในงาน</h2>
    <div class="image-container" style="position: relative; display: inline-block;">
        <img src="/GetImages/GetPathfileByID?id=@Model.id_event&TableName=mas_event&uploadtype=cover" alt="Uploaded Image" style="display: block; max-width: 100%; height: auto;" />
    </div>

    <div class="addMarker" id="addMarkPanel" style="display: none; position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); padding: 10px 20px; background-color: rgba(255, 0, 0, 0.5); color: white; font-size: 16px; border-radius: 5px;">
        <div>Detail: <input type="text" id="detail" /></div>
        <div id="markerSetContainer">
            Set:
            <!-- Default Set A -->
        </div>
        <div>
            <button type="button" id="createSetBtn">Create New Set</button>
        </div>
        <input type="button" name="addMarkerBtn" id="addMarkerBtn" value="Save" />
    </div>

    <input type="button" name="addMark" id="addMark" value="Add" onclick="showAddMark()" />

    <h3>Marker List</h3>
    <ul id="markerList"></ul>

    <script>function showAddMark() {
            $('#addMarkPanel').show();
        }

        $(document).ready(function () {
            let markerCounts = {};
            let isDragging = false;
            let currentMarker = null;
            let offsetX = 0;
            let offsetY = 0;

            // Load markers from local storage and initialize default sets
            loadMarkers();
            initializeDefaultSetA();

            $('#addMarkerBtn').click(function () {
                const selectedSet = $('input[name="markerSet"]:checked').val();
                if (!selectedSet) return;
                let newMarker;
                if (!markerCounts[selectedSet]) markerCounts[selectedSet] = 0;
                markerCounts[selectedSet]++;
                newMarker = createMarker(selectedSet + markerCounts[selectedSet], 'Marker ' + markerCounts[selectedSet], selectedSet);
                $(`#markCount${selectedSet}`).val(markerCounts[selectedSet]);

                $('.image-container').append(newMarker);
                attachDragHandlers(newMarker);
                attachHoverHandlers(newMarker);
                saveMarkers();
                $('#addMarkPanel').hide();
            });

            $('#createSetBtn').click(function () {
                const newSet = prompt('Enter the name of the new set:');
                if (newSet && !markerCounts[newSet]) {
                    markerCounts[newSet] = 0;
                    addNewSetOption(newSet);
                }
            });

            function addNewSetOption(set) {
                const setColor = getSetColor(set);
                $('#markerSetContainer').append(`<label><input type="radio" name="markerSet" value="${set}"> ${set}<span class="delete-set" data-set="${set}">✖</span></label>`);
                $(`<style>.marker-set-${set} { background-color: ${setColor}; }</style>`).appendTo('head');
                $(`<input type="hidden" name="markCount${set}" id="markCount${set}" value="0">`).appendTo('body');
            }

            function getSetColor(set) {
                const colors = {
                    'A': '#ff0000',
                    'B': '#00ff00',
                    'C': '#0000ff',
                    'D': '#ffff00'
                };
                return colors[set] || '#000000';
            }

            function initializeDefaultSetA() {
                const defaultSet = 'A';
                if (!markerCounts[defaultSet]) {
                    markerCounts[defaultSet] = 0;
                    addNewSetOption(defaultSet);
                }
            }

            $(document).on('click', '.delete-set', function () {
                const set = $(this).data('set');
                deleteSet(set);
            });

            function deleteSet(set) {
                $(`.marker-set-${set}`).remove();
                $(`input[name="markerSet"][value="${set}"]`).parent().remove();
                $(`style:contains(".marker-set-${set}")`).remove();
                delete markerCounts[set];
                $(`#markCount${set}`).remove();
                saveMarkers();
            }

            function createMarker(id, text, set, left = '50%', top = '50%') {
                const detailValue = document.getElementById('detail').value;
                return $(`
                            <div class="marker marker-set-${set}" id="marker${id}" data-detail="${detailValue}" style="left: ${left}; top: ${top}; position: absolute; transform: translate(-50%, -50%); padding: 10px 20px; color: white; font-size: 16px; border-radius: 5px; cursor: move;">
                                <div>${text.replace('Marker', '')}</div>
                            </div>`
                );
            }

            function attachDragHandlers(marker) {
                marker.on('mousedown', function (e) {
                    isDragging = true;
                    currentMarker = $(this);
                    offsetX = e.clientX - currentMarker.position().left;
                    offsetY = e.clientY - currentMarker.position().top;
                    currentMarker.css('cursor', 'grabbing');
                });
            }

            $(document).on('mousemove', function (e) {
                if (isDragging && currentMarker) {
                    const container = currentMarker.parent();
                    const containerOffset = container.offset();
                    let newLeft = e.clientX - containerOffset.left - offsetX;
                    let newTop = e.clientY - containerOffset.top - offsetY;

                    newLeft = Math.max(0, Math.min(newLeft, container.width() - currentMarker.outerWidth()));
                    newTop = Math.max(0, Math.min(newTop, container.height() - currentMarker.outerHeight()));

                    currentMarker.css({ left: newLeft + 'px', top: newTop + 'px' });
                }
            });

            $(document).on('mouseup', function () {
                if (isDragging && currentMarker) {
                    isDragging = false;
                    currentMarker.css('cursor', 'move');
                    saveMarkers();
                    currentMarker = null;
                }
            });

            function saveMarkers() {
                const markers = [];
                $('.marker').each(function () {
                    const marker = $(this);
                    const id = marker.attr('id');
                    const left = marker.css('left');
                    const top = marker.css('top');
                    const text = marker.find('div').text().trim();
                    const detail = marker.data('detail');
                    const set = marker.attr('class').split(' ').find(c => c.startsWith('marker-set-')).replace('marker-set-', '');
                    markers.push({ id, left, top, text, detail, set });
                });
                localStorage.setItem('markers', JSON.stringify(markers));
                renderMarkerList();
            }

            function loadMarkers() {
                const markers = JSON.parse(localStorage.getItem('markers')) || [];
                markers.forEach(marker => {
                    if (!markerCounts[marker.set]) {
                        markerCounts[marker.set] = 0;
                        addNewSetOption(marker.set);
                    }
                    const newMarker = createMarker(marker.id.replace('marker', ''), marker.text, marker.set, marker.left, marker.top);
                    newMarker.data('detail', marker.detail);
                    $('.image-container').append(newMarker);
                    attachDragHandlers(newMarker);
                    attachHoverHandlers(newMarker);
                    markerCounts[marker.set]++;
                });

                renderMarkerList();
            }

            function attachHoverHandlers(marker) {
                marker.hover(
                    function () {
                        const markerId = $(this).attr('id');
                        const listItem = $(`#list-${markerId}`);
                        listItem.addClass('highlighted');
                    },
                    function () {
                        const markerId = $(this).attr('id');
                        const listItem = $(`#list-${markerId}`);
                        listItem.removeClass('highlighted');
                    }
                );
            }

            function renderMarkerList() {
                const markerList = $('#markerList');
                markerList.empty();
                const markers = JSON.parse(localStorage.getItem('markers')) || [];
                markers.forEach(marker => {
                    const left = marker.left.replace('px', '');
                    const top = marker.top.replace('px', '');
                    const listItem = `<li id="list-${marker.id}">${marker.text.replace('Marker', '')} ${marker.detail} ชั้น ${marker.set} X ${left} Y ${top}</li>`;
                    markerList.append(listItem);
                });

                $('.marker').each(function () {
                    attachHoverHandlers($(this));
                });
            }
        });</script>
</body>
</html>
